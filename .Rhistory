else if(df.linked1[pat,"avType"] == "M"){
df.failure_rate["Mechanical","valve.yrs"] = df.failure_rate["Mechanical","valve.yrs"] + valve_yrs
}
}
df.failure_rate["Bioprosthetic","valve.yrs"] = sum(df.failure_rate[1:3,"valve.yrs"])
df.failure_rate["CE","failure.rate"] = df.failure_rate["CE","explants"] / df.failure_rate["CE","valve.yrs"]
df.failure_rate["SJM.Epic","failure.rate"] = df.failure_rate["SJM.Epic","explants"] / df.failure_rate["SJM.Epic","valve.yrs"]
df.failure_rate["SJM.Trifecta","failure.rate"] = df.failure_rate["SJM.Trifecta","explants"] / df.failure_rate["SJM.Trifecta","valve.yrs"]
df.failure_rate["Bioprosthetic","failure.rate"] = df.failure_rate["Bioprosthetic","explants"] / df.failure_rate["Bioprosthetic","valve.yrs"]
df.failure_rate["Mechanical","failure.rate"] = df.failure_rate["Mechanical","explants"] / df.failure_rate["Mechanical","valve.yrs"]
# confidence intervals
assign("df.failure_rate", df.failure_rate, envir = .GlobalEnv)
# generate data frame to be graphed
df.results_graph = cbind(valve=row.names(df.failure_rate), failure.rate=df.failure_rate[,"failure.rate"])
#df.results_graph = within(df.results_graph,  failure.rate <- factor(failure.rate, levels=failure.rate))
print(df.results_graph)
# melt
#df.melted = melt(df.results_graph, variable.name = "valve", value.name = "failure.rate")
# round hit rates to 2 sig figs
df.results_graph[,"failure.rate"] = round(as.double(df.results_graph[,"failure.rate"]), digits=4)
# add CI columns
print(df.results_graph)
plot.hist = ggplot(df.results_graph, aes(x=valve, y=failure.rate, fill=valve)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_text(aes(label = failure.rate, group = valve), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
failureRate = function()
{
df.failure_rate = data.frame("implants"=c(0,0,0,0,0), "explants"=c(0,0,0,0,0), "valve.yrs"=c(0,0,0,0,0), "failure.rate"=c(0,0,0,0,0), "upper.CI"=c(0,0,0,0,0), "lower.CI"=c(0,0,0,0,0))
row.names(df.failure_rate) = c("CE", "SJM.Epic", "SJM.Trifecta", "Bioprosthetic", "Mechanical")
df.failure_rate["CE","implants"] = sum(df.by_brand[1,3:13])
df.failure_rate["SJM.Epic","implants"] = sum(df.by_brand[3,3:13])
df.failure_rate["SJM.Trifecta","implants"] = sum(df.by_brand[5,3:13])
df.failure_rate["Bioprosthetic","implants"] = sum(df.failure_rate[1:3,"implants"])
df.failure_rate["Mechanical","implants"] = sum(df.by_brand[7,3:13])
df.failure_rate["CE","explants"] = sum(df.by_brand[2,3:13])
df.failure_rate["SJM.Epic","explants"] = sum(df.by_brand[4,3:13])
df.failure_rate["SJM.Trifecta","explants"] = sum(df.by_brand[6,3:13])
df.failure_rate["Bioprosthetic","explants"] = sum(df.failure_rate[1:3,"explants"])
df.failure_rate["Mechanical","explants"] = sum(df.by_brand[8,3:13])
for(pat in 1:NUM_unique){
valve_yrs = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[pat,"ordate"]) / 365.2422)
if(length(grep("CE ", df.unique[pat,"avImp"])) == 1){
df.failure_rate["CE","valve.yrs"] = df.failure_rate["CE","valve.yrs"] + valve_yrs
}
else if(length(grep("Epic", df.unique[pat,"avImp"])) == 1){
df.failure_rate["SJM.Epic","valve.yrs"] = df.failure_rate["SJM.Epic","valve.yrs"] + valve_yrs
}
else if(length(grep("Tri", df.unique[pat,"avImp"])) == 1){
df.failure_rate["SJM.Trifecta","valve.yrs"] = df.failure_rate["SJM.Trifecta","valve.yrs"] + valve_yrs
}
else if(df.unique[pat,"avType"] == "M"){
df.failure_rate["Mechanical","valve.yrs"] = df.failure_rate["Mechanical","valve.yrs"] + valve_yrs
}
}
for(pat in 1:NUM_linked){
valve_yrs = abs((df.linked2[pat,"ordate"] - df.linked1[pat,"ordate"]) / 365.2422)
if(length(grep("CE ", df.linked1[pat,"avImp"])) == 1){
df.failure_rate["CE","valve.yrs"] = df.failure_rate["CE","valve.yrs"] + valve_yrs
}
else if(length(grep("Epic", df.linked1[pat,"avImp"])) == 1){
df.failure_rate["SJM.Epic","valve.yrs"] = df.failure_rate["SJM.Epic","valve.yrs"] + valve_yrs
}
else if(length(grep("Tri", df.linked1[pat,"avImp"])) == 1){
df.failure_rate["SJM.Trifecta","valve.yrs"] = df.failure_rate["SJM.Trifecta","valve.yrs"] + valve_yrs
}
else if(df.linked1[pat,"avType"] == "M"){
df.failure_rate["Mechanical","valve.yrs"] = df.failure_rate["Mechanical","valve.yrs"] + valve_yrs
}
}
df.failure_rate["Bioprosthetic","valve.yrs"] = sum(df.failure_rate[1:3,"valve.yrs"])
df.failure_rate["CE","failure.rate"] = df.failure_rate["CE","explants"] / df.failure_rate["CE","valve.yrs"]
df.failure_rate["SJM.Epic","failure.rate"] = df.failure_rate["SJM.Epic","explants"] / df.failure_rate["SJM.Epic","valve.yrs"]
df.failure_rate["SJM.Trifecta","failure.rate"] = df.failure_rate["SJM.Trifecta","explants"] / df.failure_rate["SJM.Trifecta","valve.yrs"]
df.failure_rate["Bioprosthetic","failure.rate"] = df.failure_rate["Bioprosthetic","explants"] / df.failure_rate["Bioprosthetic","valve.yrs"]
df.failure_rate["Mechanical","failure.rate"] = df.failure_rate["Mechanical","explants"] / df.failure_rate["Mechanical","valve.yrs"]
# confidence intervals
assign("df.failure_rate", df.failure_rate, envir = .GlobalEnv)
# generate data frame to be graphed
df.results_graph = cbind(valve=row.names(df.failure_rate), failure.rate=df.failure_rate[,"failure.rate"])
#df.results_graph = within(df.results_graph,  failure.rate <- factor(failure.rate, levels=failure.rate))
print(df.results_graph)
# melt
#df.melted = melt(df.results_graph, variable.name = "valve", value.name = "failure.rate")
# round hit rates to 2 sig figs
df.results_graph[,"failure.rate"] = round(as.double(df.results_graph[,"failure.rate"]), digits=4)
# add CI columns
print(df.results_graph)
plot.hist = ggplot(df.results_graph, aes(x=valve, y=failure.rate, fill=valve)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_text(aes(label = failure.rate, group = valve), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
failureRate()
failureRate = function()
{
df.failure_rate = data.frame("implants"=c(0,0,0,0,0), "explants"=c(0,0,0,0,0), "valve.yrs"=c(0,0,0,0,0), "failure.rate"=c(0,0,0,0,0), "upper.CI"=c(0,0,0,0,0), "lower.CI"=c(0,0,0,0,0))
row.names(df.failure_rate) = c("CE", "SJM.Epic", "SJM.Trifecta", "Bioprosthetic", "Mechanical")
df.failure_rate["CE","implants"] = sum(df.by_brand[1,3:13])
df.failure_rate["SJM.Epic","implants"] = sum(df.by_brand[3,3:13])
df.failure_rate["SJM.Trifecta","implants"] = sum(df.by_brand[5,3:13])
df.failure_rate["Bioprosthetic","implants"] = sum(df.failure_rate[1:3,"implants"])
df.failure_rate["Mechanical","implants"] = sum(df.by_brand[7,3:13])
df.failure_rate["CE","explants"] = sum(df.by_brand[2,3:13])
df.failure_rate["SJM.Epic","explants"] = sum(df.by_brand[4,3:13])
df.failure_rate["SJM.Trifecta","explants"] = sum(df.by_brand[6,3:13])
df.failure_rate["Bioprosthetic","explants"] = sum(df.failure_rate[1:3,"explants"])
df.failure_rate["Mechanical","explants"] = sum(df.by_brand[8,3:13])
for(pat in 1:NUM_unique){
valve_yrs = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[pat,"ordate"]) / 365.2422)
if(length(grep("CE ", df.unique[pat,"avImp"])) == 1){
df.failure_rate["CE","valve.yrs"] = df.failure_rate["CE","valve.yrs"] + valve_yrs
}
else if(length(grep("Epic", df.unique[pat,"avImp"])) == 1){
df.failure_rate["SJM.Epic","valve.yrs"] = df.failure_rate["SJM.Epic","valve.yrs"] + valve_yrs
}
else if(length(grep("Tri", df.unique[pat,"avImp"])) == 1){
df.failure_rate["SJM.Trifecta","valve.yrs"] = df.failure_rate["SJM.Trifecta","valve.yrs"] + valve_yrs
}
else if(df.unique[pat,"avType"] == "M"){
df.failure_rate["Mechanical","valve.yrs"] = df.failure_rate["Mechanical","valve.yrs"] + valve_yrs
}
}
for(pat in 1:NUM_linked){
valve_yrs = abs((df.linked2[pat,"ordate"] - df.linked1[pat,"ordate"]) / 365.2422)
if(length(grep("CE ", df.linked1[pat,"avImp"])) == 1){
df.failure_rate["CE","valve.yrs"] = df.failure_rate["CE","valve.yrs"] + valve_yrs
}
else if(length(grep("Epic", df.linked1[pat,"avImp"])) == 1){
df.failure_rate["SJM.Epic","valve.yrs"] = df.failure_rate["SJM.Epic","valve.yrs"] + valve_yrs
}
else if(length(grep("Tri", df.linked1[pat,"avImp"])) == 1){
df.failure_rate["SJM.Trifecta","valve.yrs"] = df.failure_rate["SJM.Trifecta","valve.yrs"] + valve_yrs
}
else if(df.linked1[pat,"avType"] == "M"){
df.failure_rate["Mechanical","valve.yrs"] = df.failure_rate["Mechanical","valve.yrs"] + valve_yrs
}
}
df.failure_rate["Bioprosthetic","valve.yrs"] = sum(df.failure_rate[1:3,"valve.yrs"])
df.failure_rate["CE","failure.rate"] = df.failure_rate["CE","explants"] / df.failure_rate["CE","valve.yrs"]
df.failure_rate["SJM.Epic","failure.rate"] = df.failure_rate["SJM.Epic","explants"] / df.failure_rate["SJM.Epic","valve.yrs"]
df.failure_rate["SJM.Trifecta","failure.rate"] = df.failure_rate["SJM.Trifecta","explants"] / df.failure_rate["SJM.Trifecta","valve.yrs"]
df.failure_rate["Bioprosthetic","failure.rate"] = df.failure_rate["Bioprosthetic","explants"] / df.failure_rate["Bioprosthetic","valve.yrs"]
df.failure_rate["Mechanical","failure.rate"] = df.failure_rate["Mechanical","explants"] / df.failure_rate["Mechanical","valve.yrs"]
# confidence intervals
assign("df.failure_rate", df.failure_rate, envir = .GlobalEnv)
# generate data frame to be graphed
df.results_graph = cbind(valve=row.names(df.failure_rate), failure.rate=df.failure_rate[,"failure.rate"])
#df.results_graph = within(df.results_graph,  failure.rate <- factor(failure.rate, levels=failure.rate))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "valve", value.name = "failure.rate")
# round hit rates to 2 sig figs
df.melted[,"failure.rate"] = round(as.double(df.melted[,"failure.rate"]), digits=4)
# add CI columns
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=valve, y=failure.rate, fill=valve)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_text(aes(label = failure.rate, group = valve), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
failureRate()
#import libraries
#library("devtools")
#library("roxygen2")
library("ggplot2")
#library("cowplot")
#library("UpSetR")
#library("venneuler")
library("readxl")
library("reshape2")
library("dplyr")
failureRate()
failureRate = function()
{
df.failure_rate = data.frame("implants"=c(0,0,0,0,0), "explants"=c(0,0,0,0,0), "valve.yrs"=c(0,0,0,0,0), "failure.rate"=c(0,0,0,0,0), "upper.CI"=c(0,0,0,0,0), "lower.CI"=c(0,0,0,0,0))
row.names(df.failure_rate) = c("CE", "SJM.Epic", "SJM.Trifecta", "Bioprosthetic", "Mechanical")
df.failure_rate["CE","implants"] = sum(df.by_brand[1,3:13])
df.failure_rate["SJM.Epic","implants"] = sum(df.by_brand[3,3:13])
df.failure_rate["SJM.Trifecta","implants"] = sum(df.by_brand[5,3:13])
df.failure_rate["Bioprosthetic","implants"] = sum(df.failure_rate[1:3,"implants"])
df.failure_rate["Mechanical","implants"] = sum(df.by_brand[7,3:13])
df.failure_rate["CE","explants"] = sum(df.by_brand[2,3:13])
df.failure_rate["SJM.Epic","explants"] = sum(df.by_brand[4,3:13])
df.failure_rate["SJM.Trifecta","explants"] = sum(df.by_brand[6,3:13])
df.failure_rate["Bioprosthetic","explants"] = sum(df.failure_rate[1:3,"explants"])
df.failure_rate["Mechanical","explants"] = sum(df.by_brand[8,3:13])
for(pat in 1:NUM_unique){
valve_yrs = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[pat,"ordate"]) / 365.2422)
if(length(grep("CE ", df.unique[pat,"avImp"])) == 1){
df.failure_rate["CE","valve.yrs"] = df.failure_rate["CE","valve.yrs"] + valve_yrs
}
else if(length(grep("Epic", df.unique[pat,"avImp"])) == 1){
df.failure_rate["SJM.Epic","valve.yrs"] = df.failure_rate["SJM.Epic","valve.yrs"] + valve_yrs
}
else if(length(grep("Tri", df.unique[pat,"avImp"])) == 1){
df.failure_rate["SJM.Trifecta","valve.yrs"] = df.failure_rate["SJM.Trifecta","valve.yrs"] + valve_yrs
}
else if(df.unique[pat,"avType"] == "M"){
df.failure_rate["Mechanical","valve.yrs"] = df.failure_rate["Mechanical","valve.yrs"] + valve_yrs
}
}
for(pat in 1:NUM_linked){
valve_yrs = abs((df.linked2[pat,"ordate"] - df.linked1[pat,"ordate"]) / 365.2422)
if(length(grep("CE ", df.linked1[pat,"avImp"])) == 1){
df.failure_rate["CE","valve.yrs"] = df.failure_rate["CE","valve.yrs"] + valve_yrs
}
else if(length(grep("Epic", df.linked1[pat,"avImp"])) == 1){
df.failure_rate["SJM.Epic","valve.yrs"] = df.failure_rate["SJM.Epic","valve.yrs"] + valve_yrs
}
else if(length(grep("Tri", df.linked1[pat,"avImp"])) == 1){
df.failure_rate["SJM.Trifecta","valve.yrs"] = df.failure_rate["SJM.Trifecta","valve.yrs"] + valve_yrs
}
else if(df.linked1[pat,"avType"] == "M"){
df.failure_rate["Mechanical","valve.yrs"] = df.failure_rate["Mechanical","valve.yrs"] + valve_yrs
}
}
df.failure_rate["Bioprosthetic","valve.yrs"] = sum(df.failure_rate[1:3,"valve.yrs"])
df.failure_rate["CE","failure.rate"] = df.failure_rate["CE","explants"] / df.failure_rate["CE","valve.yrs"]
df.failure_rate["SJM.Epic","failure.rate"] = df.failure_rate["SJM.Epic","explants"] / df.failure_rate["SJM.Epic","valve.yrs"]
df.failure_rate["SJM.Trifecta","failure.rate"] = df.failure_rate["SJM.Trifecta","explants"] / df.failure_rate["SJM.Trifecta","valve.yrs"]
df.failure_rate["Bioprosthetic","failure.rate"] = df.failure_rate["Bioprosthetic","explants"] / df.failure_rate["Bioprosthetic","valve.yrs"]
df.failure_rate["Mechanical","failure.rate"] = df.failure_rate["Mechanical","explants"] / df.failure_rate["Mechanical","valve.yrs"]
# confidence intervals
assign("df.failure_rate", df.failure_rate, envir = .GlobalEnv)
# generate data frame to be graphed
df.results_graph = cbind(valve=row.names(df.failure_rate), failure.rate=df.failure_rate[,"failure.rate"])
#df.results_graph = within(df.results_graph,  failure.rate <- factor(failure.rate, levels=failure.rate))
print(df.results_graph)
# melt
#df.melted = melt(df.results_graph, variable.name = "valve", value.name = "failure.rate")
# round hit rates to 2 sig figs
df.results_graph[,"failure.rate"] = round(as.double(df.results_graph[,"failure.rate"]), digits=4)
# add CI columns
print(df.results_graph)
ggplot(df.results_graph, aes(x=valve, y=failure.rate, fill=valve)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_text(aes(label = failure.rate, group = valve), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
failureRate()
rm(id, excel.file, linked, pat, pat2)
View(df.all_data)
View(df.unique)
View(df.linked1)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "ordate", "age", "sex", "avImp", "avType")], "status"=1)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "ordate", "age", "sex", "avImp", "avType")], "status"=2)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "ordate", "age", "sex", "avImp", "avType")], "status"=1)
df.km_data_linked = data.frame(df.unique[,c("casenum", "Patient_ID", "ordate", "age", "sex", "avImp", "avType")], "status"=2)
View(df.km_data_linked)
df.km_data = rbind(df.km_data_unique, df.km_data_linked))
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
View(df.km_data)
View(df.km_data_linked)
View(df.km_data_unique)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "ordate", "age", "sex", "avImp", "avType")], "status"=1)
df.km_data_linked = data.frame(df.linked[,c("casenum", "Patient_ID", "ordate", "age", "sex", "avImp", "avType")], "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
nrow(df.km_data)
nrow(df.km_data_unique)
nrow(df.km_data_linked)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "ordate", "age", "sex", "avImp", "avType")], "status"=1)
df.km_data_linked = data.frame(df.linked[,c("casenum", "Patient_ID", "ordate", "age", "sex", "avImp", "avType")], "status"=2)
df.km_data_linked = data.frame(df.linked1[,c("casenum", "Patient_ID", "ordate", "age", "sex", "avImp", "avType")], "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
nrow(df.km_data_linked1)
nrow(df.km_data_linked)
nrow(df.km_data)
install.packages("survival")
library("survival")
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve yrs" = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[pat,"ordate"]) / 365.2422), "status"=1)
df.km_data_linked = data.frame(df.linked1[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve yrs" = abs((df.linked2[pat,"ordate"] - df.linked1[pat,"ordate"]) / 365.2422), "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
View(df.km_data)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve yrs" = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[,"ordate"]) / 365.2422), "status"=1)
df.km_data_linked = data.frame(df.linked1[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve yrs" = abs((df.linked2[,"ordate"] - df.linked1[,"ordate"]) / 365.2422), "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
View(df.km_data)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[,"ordate"]) / 365.2422), "status"=1)
df.km_data_linked = data.frame(df.linked1[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((df.linked2[,"ordate"] - df.linked1[,"ordate"]) / 365.2422), "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
df.km_data$SurvObj <- with(df.km_data, Surv(valve.yrs, status == 2))
km.by.sex <- survfit(SurvObj ~ sex, data = df.km_data, conf.type = "log-log")
km.by.type <- survfit(SurvObj ~ avType, data = df.km_data, conf.type = "log-log")
km.by.brand <- survfit(SurvObj ~ avImp, data = df.km_data, conf.type = "log-log")
plot(km.by.sex)
View(df.km_data)
survplot(km.by.sex)
library("survival")
survplot(km.by.sex)
autoplot(km.by.sex)
#import libraries
#library("devtools")
#library("roxygen2")
library("ggplot2")
autoplot(km.by.sex)
install.packages("ggfortify")
library("ggfortify")
autoplot(km.by.sex)
autoplot(km.by.sex) + labs(x="valve yrs", y = "survival probability")
autoplot(km.by.sex) + labs(x="valve yrs", y = "re-op probability")
library("cowplot")
plot.km_sex = autoplot(km.by.sex) + labs(x="valve yrs", y = "re-op probability")
plot.km_type = autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
plot.km_brand = autoplot(km.by.brand) + labs(x="valve yrs", y = "re-op probability")
plot_grid(plot.km_sex, plot.km_type, plot.km_brand)
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
autoplot(km.by.brand) + labs(x="valve yrs", y = "re-op probability")
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
autoplot(km.by.sex) + labs(x="valve yrs", y = "re-op probability")
autoplot(km.by.type) + labs(x="valve yrss", y = "re-op probability")
autoplot(km.by.sex) + labs(x="valve yrss", y = "re-op probability")
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
rm(plot.km_brand)
rm(plot.km_sex)
rm(plot.km_type)
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
View(km.by.sex)
View(km.by.brand)
View(km.by.type)
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
autoplot(km.by.sex) + labs(x="valve yrs", y = "re-op probability")
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[,"ordate"]) / 365.2422), "status"=1)
df.km_data_linked = data.frame(df.linked1[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((df.linked2[,"ordate"] - df.linked1[,"ordate"]) / 365.2422), "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
df.km_data$SurvObj <- with(df.km_data, Surv(valve.yrs, status == 2))
km.by.sex <- survfit(SurvObj ~ sex, data = df.km_data, conf.type = "log-log")
km.by.type <- survfit(SurvObj ~ avType, data = df.km_data, conf.type = "log-log")
km.by.brand <- survfit(SurvObj ~ avImp, data = df.km_data, conf.type = "log-log")
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
autoplot(km.by.type)
autoplot(km.by.sex)
detach("package:cowplot", unload = TRUE)
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
detach("package:ggfortify", unload = TRUE)
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
autoplot(km.by.sex)
detach("package:ggplot2", unload = TRUE)
autoplot(km.by.sex)
library(ggplot2)
autoplot(km.by.sex)
library(ggfortify)
autoplot(km.by.type)
autoplot(km.by.sex)
rm(a)
rm(excel.file)
library("survival")
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[,"ordate"]) / 365.2422), "status"=1)
df.km_data_linked = data.frame(df.linked1[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((df.linked2[,"ordate"] - df.linked1[,"ordate"]) / 365.2422), "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
df.km_data$SurvObj <- with(df.km_data, Surv(valve.yrs, status == 2))
#import libraries
#library("devtools")
#library("roxygen2")
library("ggplot2")
library("ggfortify")
km.by.sex <- survfit(SurvObj ~ sex, data = df.km_data, conf.type = "log-log")
km.by.type <- survfit(SurvObj ~ avType, data = df.km_data, conf.type = "log-log")
km.by.brand <- survfit(SurvObj ~ avImp, data = df.km_data, conf.type = "log-log")
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
nrow(df.km_data)
i=0
for(pat in 1:nrow(df.km_data)){
if(length(grep("CE ", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "CE"
}
else if(length(grep("Epic", df.linked1[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "SJM Epic"
}
else if(length(grep("Tri", df.linked1[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "SJM Trifecta"
}
else if(df.linked1[pat-i,"avType"] == "M"){
df.km_data[pat-i,"avImp"] = "Mechanical"
}
else{
df.km_data = df.km_data[-c(pat),]
i = i+1
}
}
nrow(df.km_data)
View(df.failure_rate)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[,"ordate"]) / 365.2422), "status"=1)
df.km_data_linked = data.frame(df.linked1[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((df.linked2[,"ordate"] - df.linked1[,"ordate"]) / 365.2422), "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
i=0
for(pat in 1:nrow(df.km_data)){
if(length(grep("CE ", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "CE"
}
else if(length(grep("Epic", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "SJM Epic"
}
else if(length(grep("Tri", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "SJM Trifecta"
}
else if(df.km_data[pat-i,"avType"] == "M"){
df.km_data[pat-i,"avImp"] = "Mechanical"
}
else{
df.km_data = df.km_data[-c(pat),]
i = i+1
}
}
nrow(df.km_data)
View(df.km_data)
View(df.km_data)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[,"ordate"]) / 365.2422), "status"=1)
df.km_data_linked = data.frame(df.linked1[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((df.linked2[,"ordate"] - df.linked1[,"ordate"]) / 365.2422), "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
nrow(df.km_data)
i=0
for(pat in 1:nrow(df.km_data)){
if(length(grep("CE ", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "CE"
}
else if(length(grep("Epic", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "SJM Epic"
}
else if(length(grep("Tri", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "SJM Trifecta"
}
else if(df.km_data[pat-i,"avType"] == "M"){
df.km_data[pat-i,"avImp"] = "Mechanical"
}
#else{
#  df.km_data = df.km_data[-c(pat),]
#  i = i+1
#}
}
nrow(df.km_data)
df.km_data_unique = data.frame(df.unique[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((as.POSIXct("2016-12-31 UTC", tz="UCT") - df.unique[,"ordate"]) / 365.2422), "status"=1)
df.km_data_linked = data.frame(df.linked1[,c("casenum", "Patient_ID", "age", "sex", "avImp", "avType")],
"valve.yrs" = abs((df.linked2[,"ordate"] - df.linked1[,"ordate"]) / 365.2422), "status"=2)
df.km_data = rbind(df.km_data_unique, df.km_data_linked)
i=0
for(pat in 1:nrow(df.km_data)){
if(length(grep("CE ", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "CE"
}
else if(length(grep("Epic", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "SJM Epic"
}
else if(length(grep("Tri", df.km_data[pat-i,"avImp"])) == 1){
df.km_data[pat-i,"avImp"] = "SJM Trifecta"
}
else if(df.km_data[pat-i,"avType"] == "M"){
df.km_data[pat-i,"avImp"] = "Mechanical"
}
}
df.km_data = rbind(df.km_data[which(df.km_data[,"avImp"] == "CE"), ],
df.km_data[which(df.km_data[,"avImp"] == "SJM Epic"), ],
df.km_data[which(df.km_data[,"avImp"] == "SJM Trifecta"), ],
df.km_data[which(df.km_data[,"avType"] == "M"), ])
nrow(df.km_data)
df.km_data$SurvObj <- with(df.km_data, Surv(valve.yrs, status == 2))
km.by.sex <- survfit(SurvObj ~ sex, data = df.km_data, conf.type = "log-log")
km.by.type <- survfit(SurvObj ~ avType, data = df.km_data, conf.type = "log-log")
km.by.brand <- survfit(SurvObj ~ avImp, data = df.km_data, conf.type = "log-log")
autoplot(km.by.sex) + labs(x="valve yrs", y = "re-op probability")
autoplot(km.by.type) + labs(x="valve yrs", y = "re-op probability")
View(km.by.brand)
autoplot(km.by.brand) + labs(x="valve yrs", y = "re-op probability")
install.packages("survminer")
library("survminer")
ggsurvplot(km.by.brand)
autoplot(km.by.brand) + labs(x="valve yrs", y = "re-op probability")
?autoplot
ggsurvplot(km.by.sex, xlab = "valve yrs", risk.table = T, conf.int = T)
?ggsurvplot
ggsurvplot(km.by.sex, xlab = "valve yrs", risk.table = T, conf.int = T, ylim = c(0.8, 1))
ggsurvplot(km.by.sex, xlab = "valve yrs", risk.table = T, conf.int = T, ylim = c(0.85, 1))
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, ylim = c(0.85, 1))
ggsurvplot(km.by.type, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, ylim = c(0.85, 1))
ggsurvplot(km.by.brand, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, ylim = c(0.85, 1))
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, ylim = c(0.85, 1))
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", pval = T, risk.table = T, conf.int = T,  ylim = c(0.85, 1))
ggsurvplot(km.by.brand, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, ylim = c(0.85, 1))
ggsurvplot(km.by.type, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, ylim = c(0.85, 1))
ggsurvplot(km.by.type, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T)
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, pval.coord = c(0.9, 2.5), ylim = c(0.85, 1))
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, pval.coord = c(0.9, 2.5))
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, pval.coord = c(0.5, 0.5)
ggsurvplot(km.by.type, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, ylim = c(0.85, 1))
ggsurvplot(km.by.brand, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, ylim = c(0.85, 1))
}
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, pval.coord = c(0.5, 0.5))
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, pval.coord = c(0.9, 0))
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, pval.coord = c(0, 0.9))
ggsurvplot(km.by.sex, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, pval.coord = c(0, 0.9), ylim = c(0.85, 1))
ggsurvplot(km.by.type, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, pval.coord = c(0, 0.9), ylim = c(0.85, 1))
ggsurvplot(km.by.brand, xlab = "valve yrs", ylab = "probability of valve durability", risk.table = T, conf.int = T, pval = T, pval.coord = c(0, 0.9), ylim = c(0.85, 1))
